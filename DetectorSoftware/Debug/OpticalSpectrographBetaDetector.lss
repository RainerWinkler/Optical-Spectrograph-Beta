
OpticalSpectrographBetaDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000abc  2**0
                  ALLOC
  2 .comment      0000005c  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000910  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c0  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000326  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000283  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000039b  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000020ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	37 d0       	rcall	.+110    	; 0xb2 <main>
  44:	ff c4       	rjmp	.+2558   	; 0xa44 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <putch>:
// Define Functions
// -----------------------------------------------------------------

void putch (unsigned char x)
	{
	while (!(UCSRA & (1<<UDRE)))  /* warten bis Senden moeglich                   */
  48:	5d 9b       	sbis	0x0b, 5	; 11
  4a:	fe cf       	rjmp	.-4      	; 0x48 <putch>
		{
		}
	UDR = x;                    /* schreibt das Zeichen x auf die Schnittstelle */
  4c:	8c b9       	out	0x0c, r24	; 12
  4e:	08 95       	ret

00000050 <putstring>:
	}

void putstring(unsigned char *zeiger)
	{
  50:	cf 93       	push	r28
  52:	df 93       	push	r29
  54:	ec 01       	movw	r28, r24
	while(*zeiger != 0) putch(*zeiger++); // solange keine Endemarke 0
  56:	88 81       	ld	r24, Y
  58:	88 23       	and	r24, r24
  5a:	29 f0       	breq	.+10     	; 0x66 <putstring+0x16>
  5c:	21 96       	adiw	r28, 0x01	; 1
  5e:	f4 df       	rcall	.-24     	; 0x48 <putch>
  60:	89 91       	ld	r24, Y+
  62:	81 11       	cpse	r24, r1
  64:	fc cf       	rjmp	.-8      	; 0x5e <putstring+0xe>
	}
  66:	df 91       	pop	r29
  68:	cf 91       	pop	r28
  6a:	08 95       	ret

0000006c <release_charge_of_ccd>:


void release_charge_of_ccd (void )
	{

	SETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
  6c:	94 9a       	sbi	0x12, 4	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  6e:	92 98       	cbi	0x12, 2	; 18
	
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  70:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  72:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  74:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  76:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  78:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  7a:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  7c:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  7e:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  80:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  82:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  84:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  86:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  88:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  8a:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  8c:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  8e:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  90:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  92:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  94:	92 98       	cbi	0x12, 2	; 18
	UNSETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  96:	92 98       	cbi	0x12, 2	; 18
	SETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  98:	92 9a       	sbi	0x12, 2	; 18
  9a:	08 95       	ret

0000009c <empty_ccd_array>:

	}

void empty_ccd_array( void )
	{
  9c:	87 e2       	ldi	r24, 0x27	; 39
  9e:	98 e0       	ldi	r25, 0x08	; 8
	internal_count = 0;
while ( internal_count++ < 2087 )
		{
		// Soll für 250ns Bit nicht setzen, macht 4 CPU Zyklen oder 2 Befehle, da jeder 2 CPS Zyklen benötigt
		// da die while Schleife 7 CPU Zyklen benötigt ist das Minimum aber 9 CPU Zyklen
		UNSETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
  a0:	94 98       	cbi	0x12, 4	; 18
		UNSETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
  a2:	94 98       	cbi	0x12, 4	; 18
		UNSETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
  a4:	94 98       	cbi	0x12, 4	; 18
		UNSETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);	
  a6:	94 98       	cbi	0x12, 4	; 18
	
		// Soll für 250s Bit setzen, macht 4 CPU Zyklen oder 2 Befehle,
		// da die while Schleife 7 CPU Zyklen benötigt ist das Minimum aber 9 CPU Zyklen
		SETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
  a8:	94 9a       	sbi	0x12, 4	; 18
  aa:	01 97       	sbiw	r24, 0x01	; 1

void empty_ccd_array( void )
	{
	unsigned int internal_count;
	internal_count = 0;
while ( internal_count++ < 2087 )
  ac:	00 97       	sbiw	r24, 0x00	; 0
  ae:	c1 f7       	brne	.-16     	; 0xa0 <empty_ccd_array+0x4>
	
		// Soll für 250s Bit setzen, macht 4 CPU Zyklen oder 2 Befehle,
		// da die while Schleife 7 CPU Zyklen benötigt ist das Minimum aber 9 CPU Zyklen
		SETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
		}
	}
  b0:	08 95       	ret

000000b2 <main>:
// -----------------------------------------------------------------



void main(void)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	2e 97       	sbiw	r28, 0x0e	; 14
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61

// Set Datadirektions
SETBIT( THETA_CLK_DDR_PORT, THETA_CLK_BYTE);
  c6:	8c 9a       	sbi	0x11, 4	; 17

SETBIT( SHW_DDR_PORT, SHW_BYTE); 
  c8:	8b 9a       	sbi	0x11, 3	; 17

SETBIT( THETA_ROG_DDR_PORT, THETA_ROG_BYTE); 
  ca:	8a 9a       	sbi	0x11, 2	; 17

SETBIT( TRIGGER_DDR_PORT , TRIGGER_BYTE); 
  cc:	b8 9a       	sbi	0x17, 0	; 23

// Set parameters "Serielle Schnittstelle"

 UCSRB |= (1 << TXEN); // Sender ein
  ce:	53 9a       	sbi	0x0a, 3	; 10
 UCSRB |= (1 << RXEN); // Empfänger ein
  d0:	54 9a       	sbi	0x0a, 4	; 10
 
 UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); // 8 Datenbits und einschalten
  d2:	80 b5       	in	r24, 0x20	; 32
  d4:	86 68       	ori	r24, 0x86	; 134
  d6:	80 bd       	out	0x20, r24	; 32
 UBRRH = 0;
  d8:	10 bc       	out	0x20, r1	; 32
 //UBRRL = 103; //19200 Baud bei 16 MHz U2X = 1  (OK)

 //UCSRA |= (1 << U2X);
 //UBRRL = 51; //38400 Baud bei 16 MHz U2X = 1  (OK)

 UCSRA |= (1 << U2X);
  da:	59 9a       	sbi	0x0b, 1	; 11
 UBRRL = 34; //57600 Baud bei 16 MHz U2X = 1 (OK)
  dc:	82 e2       	ldi	r24, 0x22	; 34
  de:	89 b9       	out	0x09, r24	; 9
 //UCSRA |= (1 << U2X);
 //UBRRL = 16; //115200 Baud bei 16 MHz U2X = 1 (OK)

 // Set Parameters Analog Digital Converter

 ADMUX = (1 << REFS0);
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	87 b9       	out	0x07, r24	; 7
 ADCSR = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  e4:	87 e8       	ldi	r24, 0x87	; 135
  e6:	86 b9       	out	0x06, r24	; 6
// Initialization
// -----------------------------------------------------------------

// Set S/H

UNSETBIT( SHW_PORT, SHW_BYTE); 
  e8:	93 98       	cbi	0x12, 3	; 18

// Set Clock

SETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
  ea:	94 9a       	sbi	0x12, 4	; 18

// Set ROG

SETBIT( THETA_ROG_PORT, THETA_ROG_BYTE); 
  ec:	92 9a       	sbi	0x12, 2	; 18

// Am Anfang Array leeren

empty_ccd_array( );
  ee:	d6 df       	rcall	.-84     	; 0x9c <empty_ccd_array>
empty_ccd_array( );
  f0:	d5 df       	rcall	.-86     	; 0x9c <empty_ccd_array>
empty_ccd_array( );
  f2:	d4 df       	rcall	.-88     	; 0x9c <empty_ccd_array>
empty_ccd_array( );
  f4:	d3 df       	rcall	.-90     	; 0x9c <empty_ccd_array>
empty_ccd_array( );
  f6:	d2 df       	rcall	.-92     	; 0x9c <empty_ccd_array>
empty_ccd_array( );
  f8:	d1 df       	rcall	.-94     	; 0x9c <empty_ccd_array>
empty_ccd_array( );
  fa:	d0 df       	rcall	.-96     	; 0x9c <empty_ccd_array>
empty_ccd_array( );
  fc:	cf df       	rcall	.-98     	; 0x9c <empty_ccd_array>

unsigned int count;
unsigned int adcvalue;
unsigned char zeichen_ein;
//unsigned int integrationTimeIn_ms = 1000;
long int integrationTimeIn_ms = 100;
  fe:	0f 2e       	mov	r0, r31
 100:	f4 e6       	ldi	r31, 0x64	; 100
 102:	cf 2e       	mov	r12, r31
 104:	d1 2c       	mov	r13, r1
 106:	e1 2c       	mov	r14, r1
 108:	f1 2c       	mov	r15, r1
 10a:	f0 2d       	mov	r31, r0

 		s[0] = 0x53;//S
		s[1] = 0x54;//T
		s[2] = 0x41;//A
		s[3] = 0x52;//R
    	s[4] = cr;
 10c:	0d e0       	ldi	r16, 0x0D	; 13
		s[5] = lf;
 10e:	1a e0       	ldi	r17, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 110:	0f 2e       	mov	r0, r31
 112:	f0 e9       	ldi	r31, 0x90	; 144
 114:	2f 2e       	mov	r2, r31
 116:	33 24       	eor	r3, r3
 118:	33 94       	inc	r3
 11a:	f0 2d       	mov	r31, r0

while(1)
	{

	// Für Test, Trigger zurücksetzen:
	UNSETBIT( TRIGGER_PORT , TRIGGER_BYTE); 
 11c:	c0 98       	cbi	0x18, 0	; 24

	// Warte bis irgendein Zeichen empfangen wird, erst dann wird ausgewertet
	while ( ! (UCSRA & (1 << RXC)));
 11e:	5f 9b       	sbis	0x0b, 7	; 11
 120:	fe cf       	rjmp	.-4      	; 0x11e <main+0x6c>
	zeichen_ein = UDR;
 122:	8c b1       	in	r24, 0x0c	; 12

	if (zeichen_ein == 0x49) //I
 124:	89 34       	cpi	r24, 0x49	; 73
 126:	09 f0       	breq	.+2      	; 0x12a <main+0x78>
 128:	48 c0       	rjmp	.+144    	; 0x1ba <main+0x108>
		{
		// Übermittle Integrationszeit in ms für die Belichtung
		// Die nächsten 6 Zeichen werden als Integrationszeit in ms interpretiert
		// Die Zeit ist mit führenden Nullen zu übergeben
		while ( ! (UCSRA & (1 << RXC)));
 12a:	5f 9b       	sbis	0x0b, 7	; 11
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0x78>
		s[0] = UDR;
 12e:	8c b1       	in	r24, 0x0c	; 12
 130:	89 83       	std	Y+1, r24	; 0x01
		while ( ! (UCSRA & (1 << RXC)));
 132:	5f 9b       	sbis	0x0b, 7	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <main+0x80>
		s[1] = UDR;
 136:	8c b1       	in	r24, 0x0c	; 12
 138:	8a 83       	std	Y+2, r24	; 0x02
		while ( ! (UCSRA & (1 << RXC)));
 13a:	5f 9b       	sbis	0x0b, 7	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <main+0x88>
		s[2] = UDR;
 13e:	8c b1       	in	r24, 0x0c	; 12
 140:	8b 83       	std	Y+3, r24	; 0x03
		while ( ! (UCSRA & (1 << RXC)));
 142:	5f 9b       	sbis	0x0b, 7	; 11
 144:	fe cf       	rjmp	.-4      	; 0x142 <main+0x90>
		s[3] = UDR;
 146:	8c b1       	in	r24, 0x0c	; 12
 148:	8c 83       	std	Y+4, r24	; 0x04
		while ( ! (UCSRA & (1 << RXC)));
 14a:	5f 9b       	sbis	0x0b, 7	; 11
 14c:	fe cf       	rjmp	.-4      	; 0x14a <main+0x98>
		s[4] = UDR;
 14e:	8c b1       	in	r24, 0x0c	; 12
 150:	8d 83       	std	Y+5, r24	; 0x05
		while ( ! (UCSRA & (1 << RXC)));
 152:	5f 9b       	sbis	0x0b, 7	; 11
 154:	fe cf       	rjmp	.-4      	; 0x152 <main+0xa0>
		s[5] = UDR;
 156:	8c b1       	in	r24, 0x0c	; 12
 158:	8e 83       	std	Y+6, r24	; 0x06
		s[6] = 0;
 15a:	1f 82       	std	Y+7, r1	; 0x07
		putstring( s ); // Gebe Integrationszeit zurück
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	77 df       	rcall	.-274    	; 0x50 <putstring>
		putch( cr );
 162:	80 2f       	mov	r24, r16
 164:	71 df       	rcall	.-286    	; 0x48 <putch>
		putch( lf );
 166:	81 2f       	mov	r24, r17
 168:	6f df       	rcall	.-290    	; 0x48 <putch>
		integrationTimeIn_ms = strtol( s , conversionError , 10 );
 16a:	4a e0       	ldi	r20, 0x0A	; 10
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	be 01       	movw	r22, r28
 170:	68 5f       	subi	r22, 0xF8	; 248
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	8a d2       	rcall	.+1300   	; 0x68e <strtol>
 17a:	6b 01       	movw	r12, r22
 17c:	7c 01       	movw	r14, r24

		putch('I'); // Quittiere Empfang mit I
 17e:	89 e4       	ldi	r24, 0x49	; 73
 180:	63 df       	rcall	.-314    	; 0x48 <putch>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 182:	21 2f       	mov	r18, r17
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	c7 01       	movw	r24, r14
 18c:	b6 01       	movw	r22, r12
 18e:	b8 d3       	rcall	.+1904   	; 0x900 <__ltoa_ncheck>
		ltoa( integrationTimeIn_ms, s, 10 ); // 10 fuer radix -> Dezimalsystem
		putch( cr );
 190:	80 2f       	mov	r24, r16
 192:	5a df       	rcall	.-332    	; 0x48 <putch>
		putch( lf );
 194:	81 2f       	mov	r24, r17
 196:	58 df       	rcall	.-336    	; 0x48 <putch>
		putstring( s ); // Gebe Integrationszeit zurück
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	59 df       	rcall	.-334    	; 0x50 <putstring>
		putch( cr );
 19e:	80 2f       	mov	r24, r16
 1a0:	53 df       	rcall	.-346    	; 0x48 <putch>
		putch( lf );
 1a2:	81 2f       	mov	r24, r17
 1a4:	51 df       	rcall	.-350    	; 0x48 <putch>
		putstring( conversionError ); // Gebe Integrationszeit zurück
 1a6:	ce 01       	movw	r24, r28
 1a8:	08 96       	adiw	r24, 0x08	; 8
 1aa:	52 df       	rcall	.-348    	; 0x50 <putstring>
		putch( cr );
 1ac:	80 2f       	mov	r24, r16
 1ae:	4c df       	rcall	.-360    	; 0x48 <putch>
		putch( lf );
 1b0:	81 2f       	mov	r24, r17
 1b2:	4a df       	rcall	.-364    	; 0x48 <putch>

		putch('E'); // Melde Ende mit E
 1b4:	85 e4       	ldi	r24, 0x45	; 69
 1b6:	48 df       	rcall	.-368    	; 0x48 <putch>
 1b8:	b1 cf       	rjmp	.-158    	; 0x11c <main+0x6a>

		}

	else if (zeichen_ein == 0x4A) //J
 1ba:	8a 34       	cpi	r24, 0x4A	; 74
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <main+0x10e>
 1be:	8f c0       	rjmp	.+286    	; 0x2de <main+0x22c>
		{

		// Übermittle Integrationszeit in ms für die Belichtung
		// Die nächsten 6 Zeichen werden als Integrationszeit in ms interpretiert
		// Die Zeit ist mit führenden Nullen zu übergeben
		while ( ! (UCSRA & (1 << RXC)));
 1c0:	5f 9b       	sbis	0x0b, 7	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <main+0x10e>
		s[0] = UDR;
 1c4:	8c b1       	in	r24, 0x0c	; 12
 1c6:	89 83       	std	Y+1, r24	; 0x01
		while ( ! (UCSRA & (1 << RXC)));
 1c8:	5f 9b       	sbis	0x0b, 7	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0x116>
		s[1] = UDR;
 1cc:	8c b1       	in	r24, 0x0c	; 12
 1ce:	8a 83       	std	Y+2, r24	; 0x02
		while ( ! (UCSRA & (1 << RXC)));
 1d0:	5f 9b       	sbis	0x0b, 7	; 11
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <main+0x11e>
		s[2] = UDR;
 1d4:	8c b1       	in	r24, 0x0c	; 12
 1d6:	8b 83       	std	Y+3, r24	; 0x03
		while ( ! (UCSRA & (1 << RXC)));
 1d8:	5f 9b       	sbis	0x0b, 7	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <main+0x126>
		s[3] = UDR;
 1dc:	8c b1       	in	r24, 0x0c	; 12
 1de:	8c 83       	std	Y+4, r24	; 0x04
		while ( ! (UCSRA & (1 << RXC)));
 1e0:	5f 9b       	sbis	0x0b, 7	; 11
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <main+0x12e>
		s[4] = UDR;
 1e4:	8c b1       	in	r24, 0x0c	; 12
 1e6:	8d 83       	std	Y+5, r24	; 0x05
		while ( ! (UCSRA & (1 << RXC)));
 1e8:	5f 9b       	sbis	0x0b, 7	; 11
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x136>
		s[5] = UDR;
 1ec:	8c b1       	in	r24, 0x0c	; 12
 1ee:	8e 83       	std	Y+6, r24	; 0x06
		s[6] = 0;
 1f0:	1f 82       	std	Y+7, r1	; 0x07
		putstring( s ); // Gebe Integrationszeit zurück
 1f2:	ce 01       	movw	r24, r28
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	2c df       	rcall	.-424    	; 0x50 <putstring>

		integrationTimeIn_ms = strtol( s , conversionError , 10 );
 1f8:	4a e0       	ldi	r20, 0x0A	; 10
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	be 01       	movw	r22, r28
 1fe:	68 5f       	subi	r22, 0xF8	; 248
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	ce 01       	movw	r24, r28
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	43 d2       	rcall	.+1158   	; 0x68e <strtol>
 208:	6b 01       	movw	r12, r22
 20a:	7c 01       	movw	r14, r24
		// Das letzte Zeichen ist T
		unsigned char lowByteADC = 0;
		unsigned char highByteADC = 0;

		// Für Test, Empfang des Zeichens mitteilen indem Trigger gesetzt wird:
		SETBIT( TRIGGER_PORT , TRIGGER_BYTE); 
 20c:	c0 9a       	sbi	0x18, 0	; 24

		// Jetzt Ladung entleeren, Array leeren Strahlung integrieren und Ladung erneut entleeren
		release_charge_of_ccd ( );
 20e:	2e df       	rcall	.-420    	; 0x6c <release_charge_of_ccd>
		empty_ccd_array( );
 210:	45 df       	rcall	.-374    	; 0x9c <empty_ccd_array>
		//_delay_ms(1000);
		_delay_ms(integrationTimeIn_ms);
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	24 d1       	rcall	.+584    	; 0x460 <__floatsisf>
 218:	2b 01       	movw	r4, r22
 21a:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	4a e7       	ldi	r20, 0x7A	; 122
 222:	55 e4       	ldi	r21, 0x45	; 69
 224:	a9 d1       	rcall	.+850    	; 0x578 <__mulsf3>
 226:	4b 01       	movw	r8, r22
 228:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e8       	ldi	r20, 0x80	; 128
 230:	5f e3       	ldi	r21, 0x3F	; 63
 232:	e4 d0       	rcall	.+456    	; 0x3fc <__cmpsf2>
 234:	88 23       	and	r24, r24
 236:	0c f1       	brlt	.+66     	; 0x27a <main+0x1c8>
		__ticks = 1;
	else if (__tmp > 65535)
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	3f ef       	ldi	r19, 0xFF	; 255
 23c:	4f e7       	ldi	r20, 0x7F	; 127
 23e:	57 e4       	ldi	r21, 0x47	; 71
 240:	c5 01       	movw	r24, r10
 242:	b4 01       	movw	r22, r8
 244:	95 d1       	rcall	.+810    	; 0x570 <__gesf2>
 246:	18 16       	cp	r1, r24
 248:	a4 f4       	brge	.+40     	; 0x272 <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e2       	ldi	r20, 0x20	; 32
 250:	51 e4       	ldi	r21, 0x41	; 65
 252:	c3 01       	movw	r24, r6
 254:	b2 01       	movw	r22, r4
 256:	90 d1       	rcall	.+800    	; 0x578 <__mulsf3>
 258:	d5 d0       	rcall	.+426    	; 0x404 <__fixunssfsi>
		while(__ticks)
 25a:	61 15       	cp	r22, r1
 25c:	71 05       	cpc	r23, r1
 25e:	91 f0       	breq	.+36     	; 0x284 <main+0x1d2>
 260:	c1 01       	movw	r24, r2
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0x1b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 266:	61 50       	subi	r22, 0x01	; 1
 268:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26a:	61 15       	cp	r22, r1
 26c:	71 05       	cpc	r23, r1
 26e:	c1 f7       	brne	.-16     	; 0x260 <main+0x1ae>
 270:	09 c0       	rjmp	.+18     	; 0x284 <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 272:	c5 01       	movw	r24, r10
 274:	b4 01       	movw	r22, r8
 276:	c6 d0       	rcall	.+396    	; 0x404 <__fixunssfsi>
 278:	02 c0       	rjmp	.+4      	; 0x27e <main+0x1cc>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	cb 01       	movw	r24, r22
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0x1ce>
		release_charge_of_ccd( );
 284:	f3 de       	rcall	.-538    	; 0x6c <release_charge_of_ccd>
		// Trigger First part
		//SETBIT( TRIGGER_PORT , TRIGGER_BYTE); 
		//UNSETBIT( TRIGGER_PORT , TRIGGER_BYTE); 


		putch('J');
 286:	8a e4       	ldi	r24, 0x4A	; 74
 288:	df de       	rcall	.-578    	; 0x48 <putch>
 28a:	0f 2e       	mov	r0, r31
 28c:	f7 e2       	ldi	r31, 0x27	; 39
 28e:	af 2e       	mov	r10, r31
 290:	f0 2d       	mov	r31, r0
 292:	68 94       	set
 294:	bb 24       	eor	r11, r11
 296:	b3 f8       	bld	r11, 3
		highByteADC = 0;
 298:	91 2c       	mov	r9, r1

		// Read out of CCD 
		while ( count++ < 2087 )
			{
			UNSETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
 29a:	94 98       	cbi	0x12, 4	; 18

			// Starte ADC Wandlung (Dummy, damit Periodenlängen gleich sind
			ADCSR |= (1 << ADSC);
 29c:	36 9a       	sbi	0x06, 6	; 6
			while(ADCSRA & (1 << ADSC)); //Warte auf Ende der Wandlung
 29e:	36 99       	sbic	0x06, 6	; 6
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <main+0x1ec>
			//adcvalue = (unsigned int) ADCL + ((unsigned int) ADCH << 8 );

			putch( highByteADC );
 2a2:	89 2d       	mov	r24, r9
 2a4:	d1 de       	rcall	.-606    	; 0x48 <putch>


			SETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
 2a6:	94 9a       	sbi	0x12, 4	; 18

			// Starte ADC Wandlung
			ADCSR |= (1 << ADSC);
 2a8:	36 9a       	sbi	0x06, 6	; 6
			while(ADCSRA & (1 << ADSC)); //Warte auf Ende der Wandlung
 2aa:	36 99       	sbic	0x06, 6	; 6
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <main+0x1f8>
			//adcvalue = (unsigned int) ADCL + ( ( (unsigned int) ADCH ) << 8 );
			lowByteADC = (unsigned char) ADCL;
 2ae:	84 b1       	in	r24, 0x04	; 4
			highByteADC = (unsigned char) ADCH;
 2b0:	95 b0       	in	r9, 0x05	; 5
			

			putch( lowByteADC );
 2b2:	ca de       	rcall	.-620    	; 0x48 <putch>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	a8 1a       	sub	r10, r24
 2b8:	b1 08       	sbc	r11, r1

		putch('J');
		highByteADC = 0;

		// Read out of CCD 
		while ( count++ < 2087 )
 2ba:	a1 14       	cp	r10, r1
 2bc:	b1 04       	cpc	r11, r1
 2be:	69 f7       	brne	.-38     	; 0x29a <main+0x1e8>

			putch( lowByteADC );
			
			};

		putch( highByteADC );
 2c0:	89 2d       	mov	r24, r9
 2c2:	c2 de       	rcall	.-636    	; 0x48 <putch>
		putch( 0x00 );
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	c0 de       	rcall	.-640    	; 0x48 <putch>
		putch( 0xFF );
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	be de       	rcall	.-644    	; 0x48 <putch>
		putch( 0xFF );
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	bc de       	rcall	.-648    	; 0x48 <putch>
		putch( 0xFF );
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	ba de       	rcall	.-652    	; 0x48 <putch>
		putch( 0xFF );
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	b8 de       	rcall	.-656    	; 0x48 <putch>
		putch( 0xFF );
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	b6 de       	rcall	.-660    	; 0x48 <putch>
 2dc:	1f cf       	rjmp	.-450    	; 0x11c <main+0x6a>
	else
		{


		// Für Test, Empfang des Zeichens mitteilen indem Trigger gesetzt wird:
		SETBIT( TRIGGER_PORT , TRIGGER_BYTE); 
 2de:	c0 9a       	sbi	0x18, 0	; 24

		// Jetzt Ladung entleeren, Array leeren Strahlung integrieren und Ladung erneut entleeren
		release_charge_of_ccd ( );
 2e0:	c5 de       	rcall	.-630    	; 0x6c <release_charge_of_ccd>
		empty_ccd_array( );
 2e2:	dc de       	rcall	.-584    	; 0x9c <empty_ccd_array>
		//_delay_ms(1000);
		_delay_ms(integrationTimeIn_ms);
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	bb d0       	rcall	.+374    	; 0x460 <__floatsisf>
 2ea:	2b 01       	movw	r4, r22
 2ec:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	4a e7       	ldi	r20, 0x7A	; 122
 2f4:	55 e4       	ldi	r21, 0x45	; 69
 2f6:	40 d1       	rcall	.+640    	; 0x578 <__mulsf3>
 2f8:	4b 01       	movw	r8, r22
 2fa:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	5f e3       	ldi	r21, 0x3F	; 63
 304:	7b d0       	rcall	.+246    	; 0x3fc <__cmpsf2>
 306:	88 23       	and	r24, r24
 308:	0c f1       	brlt	.+66     	; 0x34c <main+0x29a>
		__ticks = 1;
	else if (__tmp > 65535)
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	3f ef       	ldi	r19, 0xFF	; 255
 30e:	4f e7       	ldi	r20, 0x7F	; 127
 310:	57 e4       	ldi	r21, 0x47	; 71
 312:	c5 01       	movw	r24, r10
 314:	b4 01       	movw	r22, r8
 316:	2c d1       	rcall	.+600    	; 0x570 <__gesf2>
 318:	18 16       	cp	r1, r24
 31a:	a4 f4       	brge	.+40     	; 0x344 <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e2       	ldi	r20, 0x20	; 32
 322:	51 e4       	ldi	r21, 0x41	; 65
 324:	c3 01       	movw	r24, r6
 326:	b2 01       	movw	r22, r4
 328:	27 d1       	rcall	.+590    	; 0x578 <__mulsf3>
 32a:	6c d0       	rcall	.+216    	; 0x404 <__fixunssfsi>
		while(__ticks)
 32c:	61 15       	cp	r22, r1
 32e:	71 05       	cpc	r23, r1
 330:	91 f0       	breq	.+36     	; 0x356 <main+0x2a4>
 332:	c1 01       	movw	r24, r2
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0x282>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 338:	61 50       	subi	r22, 0x01	; 1
 33a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33c:	61 15       	cp	r22, r1
 33e:	71 05       	cpc	r23, r1
 340:	c1 f7       	brne	.-16     	; 0x332 <main+0x280>
 342:	09 c0       	rjmp	.+18     	; 0x356 <main+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 344:	c5 01       	movw	r24, r10
 346:	b4 01       	movw	r22, r8
 348:	5d d0       	rcall	.+186    	; 0x404 <__fixunssfsi>
 34a:	02 c0       	rjmp	.+4      	; 0x350 <main+0x29e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	cb 01       	movw	r24, r22
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x2a0>
		release_charge_of_ccd( );
 356:	8a de       	rcall	.-748    	; 0x6c <release_charge_of_ccd>

		// Trigger First part
		//SETBIT( TRIGGER_PORT , TRIGGER_BYTE); 
		//UNSETBIT( TRIGGER_PORT , TRIGGER_BYTE); 

 		s[0] = 0x53;//S
 358:	83 e5       	ldi	r24, 0x53	; 83
 35a:	89 83       	std	Y+1, r24	; 0x01
		s[1] = 0x54;//T
 35c:	84 e5       	ldi	r24, 0x54	; 84
 35e:	8a 83       	std	Y+2, r24	; 0x02
		s[2] = 0x41;//A
 360:	81 e4       	ldi	r24, 0x41	; 65
 362:	8b 83       	std	Y+3, r24	; 0x03
		s[3] = 0x52;//R
 364:	82 e5       	ldi	r24, 0x52	; 82
 366:	8c 83       	std	Y+4, r24	; 0x04
    	s[4] = cr;
 368:	0d 83       	std	Y+5, r16	; 0x05
		s[5] = lf;
 36a:	1e 83       	std	Y+6, r17	; 0x06
		s[6] = 0;
 36c:	1f 82       	std	Y+7, r1	; 0x07
		putstring( s );
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	6e de       	rcall	.-804    	; 0x50 <putstring>

		// Read out of CCD 
		while ( count++ < 2087 )
 374:	aa 24       	eor	r10, r10
 376:	a3 94       	inc	r10
 378:	b1 2c       	mov	r11, r1
		//while ( count++ < 10 )  
			{
			UNSETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
 37a:	94 98       	cbi	0x12, 4	; 18



			// Starte ADC Wandlung (Dummy, damit Periodenlängen gleich sind
			ADCSR |= (1 << ADSC);
 37c:	36 9a       	sbi	0x06, 6	; 6
			while(ADCSRA & (1 << ADSC)); //Warte auf Ende der Wandlung
 37e:	36 99       	sbic	0x06, 6	; 6
 380:	fe cf       	rjmp	.-4      	; 0x37e <main+0x2cc>
			adcvalue = (unsigned int) ADCL + ((unsigned int) ADCH << 8 );
 382:	84 b1       	in	r24, 0x04	; 4
 384:	85 b1       	in	r24, 0x05	; 5
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 386:	41 2f       	mov	r20, r17
 388:	be 01       	movw	r22, r28
 38a:	6f 5f       	subi	r22, 0xFF	; 255
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	c5 01       	movw	r24, r10
 390:	e6 d2       	rcall	.+1484   	; 0x95e <__utoa_ncheck>

			utoa( count, s, 10 ); // 10 fuer radix -> Dezimalsystem



			putstring( s );
 392:	ce 01       	movw	r24, r28
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	5c de       	rcall	.-840    	; 0x50 <putstring>
			// Messe Anfang der ersten Hälfte
			SETBIT( TRIGGER_PORT , TRIGGER_BYTE); 
 398:	c0 9a       	sbi	0x18, 0	; 24
			putch(';');
 39a:	8b e3       	ldi	r24, 0x3B	; 59
 39c:	55 de       	rcall	.-854    	; 0x48 <putch>

			// Messe Ende der ersten Hälfte
			UNSETBIT( TRIGGER_PORT , TRIGGER_BYTE); 
 39e:	c0 98       	cbi	0x18, 0	; 24


			SETBIT( THETA_CLK_PORT, THETA_CLK_BYTE);
 3a0:	94 9a       	sbi	0x12, 4	; 18

			// Starte ADC Wandlung
			ADCSR |= (1 << ADSC);
 3a2:	36 9a       	sbi	0x06, 6	; 6
			while(ADCSRA & (1 << ADSC)); //Warte auf Ende der Wandlung
 3a4:	36 99       	sbic	0x06, 6	; 6
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <main+0x2f2>
			//adcvalue = (unsigned int) ADCL;
			adcvalue = (unsigned int) ADCL + ( ( (unsigned int) ADCH ) << 8 );
 3a8:	24 b1       	in	r18, 0x04	; 4
 3aa:	85 b1       	in	r24, 0x05	; 5
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	98 2f       	mov	r25, r24
 3b0:	88 27       	eor	r24, r24
 3b2:	41 2f       	mov	r20, r17
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	82 0f       	add	r24, r18
 3bc:	91 1d       	adc	r25, r1
 3be:	cf d2       	rcall	.+1438   	; 0x95e <__utoa_ncheck>

			utoa( adcvalue, s , 10 ); // 10 fuer radix -> Dezimalsystem
			putstring( s );
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	45 de       	rcall	.-886    	; 0x50 <putstring>
			putch( cr );
 3c6:	80 2f       	mov	r24, r16
 3c8:	3f de       	rcall	.-898    	; 0x48 <putch>
			putch( lf );
 3ca:	81 2f       	mov	r24, r17
 3cc:	3d de       	rcall	.-902    	; 0x48 <putch>
		s[5] = lf;
		s[6] = 0;
		putstring( s );

		// Read out of CCD 
		while ( count++ < 2087 )
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	a8 1a       	sub	r10, r24
 3d2:	b8 0a       	sbc	r11, r24
 3d4:	88 e2       	ldi	r24, 0x28	; 40
 3d6:	a8 16       	cp	r10, r24
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	b8 06       	cpc	r11, r24
 3dc:	71 f6       	brne	.-100    	; 0x37a <main+0x2c8>
			putstring( s );
			putch( cr );
			putch( lf );

			};
		s[0] = 0x45;//E
 3de:	85 e4       	ldi	r24, 0x45	; 69
 3e0:	89 83       	std	Y+1, r24	; 0x01
		s[1] = 0x4E;//N
 3e2:	8e e4       	ldi	r24, 0x4E	; 78
 3e4:	8a 83       	std	Y+2, r24	; 0x02
		s[2] = 0x44;//D
 3e6:	84 e4       	ldi	r24, 0x44	; 68
 3e8:	8b 83       	std	Y+3, r24	; 0x03
		s[3] = 0x45;//E
 3ea:	85 e4       	ldi	r24, 0x45	; 69
 3ec:	8c 83       	std	Y+4, r24	; 0x04
		s[4] = cr;
 3ee:	0d 83       	std	Y+5, r16	; 0x05
		s[5] = lf;
 3f0:	1e 83       	std	Y+6, r17	; 0x06
		s[6] = 0;
 3f2:	1f 82       	std	Y+7, r1	; 0x07
		putstring( s );
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	2b de       	rcall	.-938    	; 0x50 <putstring>
 3fa:	90 ce       	rjmp	.-736    	; 0x11c <main+0x6a>

000003fc <__cmpsf2>:
 3fc:	6c d0       	rcall	.+216    	; 0x4d6 <__fp_cmp>
 3fe:	08 f4       	brcc	.+2      	; 0x402 <__cmpsf2+0x6>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret

00000404 <__fixunssfsi>:
 404:	94 d0       	rcall	.+296    	; 0x52e <__fp_splitA>
 406:	88 f0       	brcs	.+34     	; 0x42a <__fixunssfsi+0x26>
 408:	9f 57       	subi	r25, 0x7F	; 127
 40a:	90 f0       	brcs	.+36     	; 0x430 <__fixunssfsi+0x2c>
 40c:	b9 2f       	mov	r27, r25
 40e:	99 27       	eor	r25, r25
 410:	b7 51       	subi	r27, 0x17	; 23
 412:	a0 f0       	brcs	.+40     	; 0x43c <__fixunssfsi+0x38>
 414:	d1 f0       	breq	.+52     	; 0x44a <__fixunssfsi+0x46>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	1a f0       	brmi	.+6      	; 0x426 <__fixunssfsi+0x22>
 420:	ba 95       	dec	r27
 422:	c9 f7       	brne	.-14     	; 0x416 <__fixunssfsi+0x12>
 424:	12 c0       	rjmp	.+36     	; 0x44a <__fixunssfsi+0x46>
 426:	b1 30       	cpi	r27, 0x01	; 1
 428:	81 f0       	breq	.+32     	; 0x44a <__fixunssfsi+0x46>
 42a:	9b d0       	rcall	.+310    	; 0x562 <__fp_zero>
 42c:	b1 e0       	ldi	r27, 0x01	; 1
 42e:	08 95       	ret
 430:	98 c0       	rjmp	.+304    	; 0x562 <__fp_zero>
 432:	67 2f       	mov	r22, r23
 434:	78 2f       	mov	r23, r24
 436:	88 27       	eor	r24, r24
 438:	b8 5f       	subi	r27, 0xF8	; 248
 43a:	39 f0       	breq	.+14     	; 0x44a <__fixunssfsi+0x46>
 43c:	b9 3f       	cpi	r27, 0xF9	; 249
 43e:	cc f3       	brlt	.-14     	; 0x432 <__fixunssfsi+0x2e>
 440:	86 95       	lsr	r24
 442:	77 95       	ror	r23
 444:	67 95       	ror	r22
 446:	b3 95       	inc	r27
 448:	d9 f7       	brne	.-10     	; 0x440 <__fixunssfsi+0x3c>
 44a:	3e f4       	brtc	.+14     	; 0x45a <__fixunssfsi+0x56>
 44c:	90 95       	com	r25
 44e:	80 95       	com	r24
 450:	70 95       	com	r23
 452:	61 95       	neg	r22
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__floatunsisf>:
 45c:	e8 94       	clt
 45e:	09 c0       	rjmp	.+18     	; 0x472 <__floatsisf+0x12>

00000460 <__floatsisf>:
 460:	97 fb       	bst	r25, 7
 462:	3e f4       	brtc	.+14     	; 0x472 <__floatsisf+0x12>
 464:	90 95       	com	r25
 466:	80 95       	com	r24
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	99 23       	and	r25, r25
 474:	a9 f0       	breq	.+42     	; 0x4a0 <__floatsisf+0x40>
 476:	f9 2f       	mov	r31, r25
 478:	96 e9       	ldi	r25, 0x96	; 150
 47a:	bb 27       	eor	r27, r27
 47c:	93 95       	inc	r25
 47e:	f6 95       	lsr	r31
 480:	87 95       	ror	r24
 482:	77 95       	ror	r23
 484:	67 95       	ror	r22
 486:	b7 95       	ror	r27
 488:	f1 11       	cpse	r31, r1
 48a:	f8 cf       	rjmp	.-16     	; 0x47c <__floatsisf+0x1c>
 48c:	fa f4       	brpl	.+62     	; 0x4cc <__floatsisf+0x6c>
 48e:	bb 0f       	add	r27, r27
 490:	11 f4       	brne	.+4      	; 0x496 <__floatsisf+0x36>
 492:	60 ff       	sbrs	r22, 0
 494:	1b c0       	rjmp	.+54     	; 0x4cc <__floatsisf+0x6c>
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	16 c0       	rjmp	.+44     	; 0x4cc <__floatsisf+0x6c>
 4a0:	88 23       	and	r24, r24
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <__floatsisf+0x48>
 4a4:	96 e9       	ldi	r25, 0x96	; 150
 4a6:	11 c0       	rjmp	.+34     	; 0x4ca <__floatsisf+0x6a>
 4a8:	77 23       	and	r23, r23
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <__floatsisf+0x54>
 4ac:	9e e8       	ldi	r25, 0x8E	; 142
 4ae:	87 2f       	mov	r24, r23
 4b0:	76 2f       	mov	r23, r22
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__floatsisf+0x5e>
 4b4:	66 23       	and	r22, r22
 4b6:	71 f0       	breq	.+28     	; 0x4d4 <__floatsisf+0x74>
 4b8:	96 e8       	ldi	r25, 0x86	; 134
 4ba:	86 2f       	mov	r24, r22
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	2a f0       	brmi	.+10     	; 0x4cc <__floatsisf+0x6c>
 4c2:	9a 95       	dec	r25
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	da f7       	brpl	.-10     	; 0x4c2 <__floatsisf+0x62>
 4cc:	88 0f       	add	r24, r24
 4ce:	96 95       	lsr	r25
 4d0:	87 95       	ror	r24
 4d2:	97 f9       	bld	r25, 7
 4d4:	08 95       	ret

000004d6 <__fp_cmp>:
 4d6:	99 0f       	add	r25, r25
 4d8:	00 08       	sbc	r0, r0
 4da:	55 0f       	add	r21, r21
 4dc:	aa 0b       	sbc	r26, r26
 4de:	e0 e8       	ldi	r30, 0x80	; 128
 4e0:	fe ef       	ldi	r31, 0xFE	; 254
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	e8 07       	cpc	r30, r24
 4e8:	f9 07       	cpc	r31, r25
 4ea:	c0 f0       	brcs	.+48     	; 0x51c <__fp_cmp+0x46>
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	e4 07       	cpc	r30, r20
 4f2:	f5 07       	cpc	r31, r21
 4f4:	98 f0       	brcs	.+38     	; 0x51c <__fp_cmp+0x46>
 4f6:	62 1b       	sub	r22, r18
 4f8:	73 0b       	sbc	r23, r19
 4fa:	84 0b       	sbc	r24, r20
 4fc:	95 0b       	sbc	r25, r21
 4fe:	39 f4       	brne	.+14     	; 0x50e <__fp_cmp+0x38>
 500:	0a 26       	eor	r0, r26
 502:	61 f0       	breq	.+24     	; 0x51c <__fp_cmp+0x46>
 504:	23 2b       	or	r18, r19
 506:	24 2b       	or	r18, r20
 508:	25 2b       	or	r18, r21
 50a:	21 f4       	brne	.+8      	; 0x514 <__fp_cmp+0x3e>
 50c:	08 95       	ret
 50e:	0a 26       	eor	r0, r26
 510:	09 f4       	brne	.+2      	; 0x514 <__fp_cmp+0x3e>
 512:	a1 40       	sbci	r26, 0x01	; 1
 514:	a6 95       	lsr	r26
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	81 1d       	adc	r24, r1
 51a:	81 1d       	adc	r24, r1
 51c:	08 95       	ret

0000051e <__fp_split3>:
 51e:	57 fd       	sbrc	r21, 7
 520:	90 58       	subi	r25, 0x80	; 128
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	59 f0       	breq	.+22     	; 0x53e <__fp_splitA+0x10>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	71 f0       	breq	.+28     	; 0x548 <__fp_splitA+0x1a>
 52c:	47 95       	ror	r20

0000052e <__fp_splitA>:
 52e:	88 0f       	add	r24, r24
 530:	97 fb       	bst	r25, 7
 532:	99 1f       	adc	r25, r25
 534:	61 f0       	breq	.+24     	; 0x54e <__fp_splitA+0x20>
 536:	9f 3f       	cpi	r25, 0xFF	; 255
 538:	79 f0       	breq	.+30     	; 0x558 <__fp_splitA+0x2a>
 53a:	87 95       	ror	r24
 53c:	08 95       	ret
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	55 1f       	adc	r21, r21
 546:	f2 cf       	rjmp	.-28     	; 0x52c <__fp_split3+0xe>
 548:	46 95       	lsr	r20
 54a:	f1 df       	rcall	.-30     	; 0x52e <__fp_splitA>
 54c:	08 c0       	rjmp	.+16     	; 0x55e <__fp_splitA+0x30>
 54e:	16 16       	cp	r1, r22
 550:	17 06       	cpc	r1, r23
 552:	18 06       	cpc	r1, r24
 554:	99 1f       	adc	r25, r25
 556:	f1 cf       	rjmp	.-30     	; 0x53a <__fp_splitA+0xc>
 558:	86 95       	lsr	r24
 55a:	71 05       	cpc	r23, r1
 55c:	61 05       	cpc	r22, r1
 55e:	08 94       	sec
 560:	08 95       	ret

00000562 <__fp_zero>:
 562:	e8 94       	clt

00000564 <__fp_szero>:
 564:	bb 27       	eor	r27, r27
 566:	66 27       	eor	r22, r22
 568:	77 27       	eor	r23, r23
 56a:	cb 01       	movw	r24, r22
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__gesf2>:
 570:	b2 df       	rcall	.-156    	; 0x4d6 <__fp_cmp>
 572:	08 f4       	brcc	.+2      	; 0x576 <__gesf2+0x6>
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	08 95       	ret

00000578 <__mulsf3>:
 578:	0b d0       	rcall	.+22     	; 0x590 <__mulsf3x>
 57a:	78 c0       	rjmp	.+240    	; 0x66c <__fp_round>
 57c:	69 d0       	rcall	.+210    	; 0x650 <__fp_pscA>
 57e:	28 f0       	brcs	.+10     	; 0x58a <__mulsf3+0x12>
 580:	6e d0       	rcall	.+220    	; 0x65e <__fp_pscB>
 582:	18 f0       	brcs	.+6      	; 0x58a <__mulsf3+0x12>
 584:	95 23       	and	r25, r21
 586:	09 f0       	breq	.+2      	; 0x58a <__mulsf3+0x12>
 588:	5a c0       	rjmp	.+180    	; 0x63e <__fp_inf>
 58a:	5f c0       	rjmp	.+190    	; 0x64a <__fp_nan>
 58c:	11 24       	eor	r1, r1
 58e:	ea cf       	rjmp	.-44     	; 0x564 <__fp_szero>

00000590 <__mulsf3x>:
 590:	c6 df       	rcall	.-116    	; 0x51e <__fp_split3>
 592:	a0 f3       	brcs	.-24     	; 0x57c <__mulsf3+0x4>

00000594 <__mulsf3_pse>:
 594:	95 9f       	mul	r25, r21
 596:	d1 f3       	breq	.-12     	; 0x58c <__mulsf3+0x14>
 598:	95 0f       	add	r25, r21
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	55 1f       	adc	r21, r21
 59e:	62 9f       	mul	r22, r18
 5a0:	f0 01       	movw	r30, r0
 5a2:	72 9f       	mul	r23, r18
 5a4:	bb 27       	eor	r27, r27
 5a6:	f0 0d       	add	r31, r0
 5a8:	b1 1d       	adc	r27, r1
 5aa:	63 9f       	mul	r22, r19
 5ac:	aa 27       	eor	r26, r26
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	aa 1f       	adc	r26, r26
 5b4:	64 9f       	mul	r22, r20
 5b6:	66 27       	eor	r22, r22
 5b8:	b0 0d       	add	r27, r0
 5ba:	a1 1d       	adc	r26, r1
 5bc:	66 1f       	adc	r22, r22
 5be:	82 9f       	mul	r24, r18
 5c0:	22 27       	eor	r18, r18
 5c2:	b0 0d       	add	r27, r0
 5c4:	a1 1d       	adc	r26, r1
 5c6:	62 1f       	adc	r22, r18
 5c8:	73 9f       	mul	r23, r19
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	83 9f       	mul	r24, r19
 5d2:	a0 0d       	add	r26, r0
 5d4:	61 1d       	adc	r22, r1
 5d6:	22 1f       	adc	r18, r18
 5d8:	74 9f       	mul	r23, r20
 5da:	33 27       	eor	r19, r19
 5dc:	a0 0d       	add	r26, r0
 5de:	61 1d       	adc	r22, r1
 5e0:	23 1f       	adc	r18, r19
 5e2:	84 9f       	mul	r24, r20
 5e4:	60 0d       	add	r22, r0
 5e6:	21 1d       	adc	r18, r1
 5e8:	82 2f       	mov	r24, r18
 5ea:	76 2f       	mov	r23, r22
 5ec:	6a 2f       	mov	r22, r26
 5ee:	11 24       	eor	r1, r1
 5f0:	9f 57       	subi	r25, 0x7F	; 127
 5f2:	50 40       	sbci	r21, 0x00	; 0
 5f4:	8a f0       	brmi	.+34     	; 0x618 <__mulsf3_pse+0x84>
 5f6:	e1 f0       	breq	.+56     	; 0x630 <__mulsf3_pse+0x9c>
 5f8:	88 23       	and	r24, r24
 5fa:	4a f0       	brmi	.+18     	; 0x60e <__mulsf3_pse+0x7a>
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	bb 1f       	adc	r27, r27
 602:	66 1f       	adc	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	a9 f7       	brne	.-22     	; 0x5f8 <__mulsf3_pse+0x64>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	70 f0       	brcs	.+28     	; 0x630 <__mulsf3_pse+0x9c>
 614:	14 c0       	rjmp	.+40     	; 0x63e <__fp_inf>
 616:	a6 cf       	rjmp	.-180    	; 0x564 <__fp_szero>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	ec f3       	brlt	.-6      	; 0x616 <__mulsf3_pse+0x82>
 61c:	98 3e       	cpi	r25, 0xE8	; 232
 61e:	dc f3       	brlt	.-10     	; 0x616 <__mulsf3_pse+0x82>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f7 95       	ror	r31
 62a:	e7 95       	ror	r30
 62c:	9f 5f       	subi	r25, 0xFF	; 255
 62e:	c1 f7       	brne	.-16     	; 0x620 <__mulsf3_pse+0x8c>
 630:	fe 2b       	or	r31, r30
 632:	88 0f       	add	r24, r24
 634:	91 1d       	adc	r25, r1
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__fp_inf>:
 63e:	97 f9       	bld	r25, 7
 640:	9f 67       	ori	r25, 0x7F	; 127
 642:	80 e8       	ldi	r24, 0x80	; 128
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	08 95       	ret

0000064a <__fp_nan>:
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	80 ec       	ldi	r24, 0xC0	; 192
 64e:	08 95       	ret

00000650 <__fp_pscA>:
 650:	00 24       	eor	r0, r0
 652:	0a 94       	dec	r0
 654:	16 16       	cp	r1, r22
 656:	17 06       	cpc	r1, r23
 658:	18 06       	cpc	r1, r24
 65a:	09 06       	cpc	r0, r25
 65c:	08 95       	ret

0000065e <__fp_pscB>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	12 16       	cp	r1, r18
 664:	13 06       	cpc	r1, r19
 666:	14 06       	cpc	r1, r20
 668:	05 06       	cpc	r0, r21
 66a:	08 95       	ret

0000066c <__fp_round>:
 66c:	09 2e       	mov	r0, r25
 66e:	03 94       	inc	r0
 670:	00 0c       	add	r0, r0
 672:	11 f4       	brne	.+4      	; 0x678 <__fp_round+0xc>
 674:	88 23       	and	r24, r24
 676:	52 f0       	brmi	.+20     	; 0x68c <__fp_round+0x20>
 678:	bb 0f       	add	r27, r27
 67a:	40 f4       	brcc	.+16     	; 0x68c <__fp_round+0x20>
 67c:	bf 2b       	or	r27, r31
 67e:	11 f4       	brne	.+4      	; 0x684 <__fp_round+0x18>
 680:	60 ff       	sbrs	r22, 0
 682:	04 c0       	rjmp	.+8      	; 0x68c <__fp_round+0x20>
 684:	6f 5f       	subi	r22, 0xFF	; 255
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	08 95       	ret

0000068e <strtol>:
 68e:	2f 92       	push	r2
 690:	3f 92       	push	r3
 692:	5f 92       	push	r5
 694:	6f 92       	push	r6
 696:	7f 92       	push	r7
 698:	8f 92       	push	r8
 69a:	9f 92       	push	r9
 69c:	af 92       	push	r10
 69e:	bf 92       	push	r11
 6a0:	cf 92       	push	r12
 6a2:	df 92       	push	r13
 6a4:	ef 92       	push	r14
 6a6:	ff 92       	push	r15
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	8b 01       	movw	r16, r22
 6b2:	ea 01       	movw	r28, r20
 6b4:	61 15       	cp	r22, r1
 6b6:	71 05       	cpc	r23, r1
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <strtol+0x34>
 6ba:	db 01       	movw	r26, r22
 6bc:	8c 93       	st	X, r24
 6be:	11 96       	adiw	r26, 0x01	; 1
 6c0:	9c 93       	st	X, r25
 6c2:	20 97       	sbiw	r28, 0x00	; 0
 6c4:	39 f0       	breq	.+14     	; 0x6d4 <strtol+0x46>
 6c6:	9e 01       	movw	r18, r28
 6c8:	22 50       	subi	r18, 0x02	; 2
 6ca:	31 09       	sbc	r19, r1
 6cc:	23 32       	cpi	r18, 0x23	; 35
 6ce:	31 05       	cpc	r19, r1
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <strtol+0x46>
 6d2:	f8 c0       	rjmp	.+496    	; 0x8c4 <strtol+0x236>
 6d4:	7c 01       	movw	r14, r24
 6d6:	67 01       	movw	r12, r14
 6d8:	bf ef       	ldi	r27, 0xFF	; 255
 6da:	cb 1a       	sub	r12, r27
 6dc:	db 0a       	sbc	r13, r27
 6de:	56 01       	movw	r10, r12
 6e0:	f7 01       	movw	r30, r14
 6e2:	60 80       	ld	r6, Z
 6e4:	86 2d       	mov	r24, r6
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	03 d1       	rcall	.+518    	; 0x8f0 <isspace>
 6ea:	89 2b       	or	r24, r25
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <strtol+0x64>
 6ee:	76 01       	movw	r14, r12
 6f0:	f2 cf       	rjmp	.-28     	; 0x6d6 <strtol+0x48>
 6f2:	fd e2       	ldi	r31, 0x2D	; 45
 6f4:	6f 12       	cpse	r6, r31
 6f6:	0a c0       	rjmp	.+20     	; 0x70c <strtol+0x7e>
 6f8:	57 01       	movw	r10, r14
 6fa:	82 e0       	ldi	r24, 0x02	; 2
 6fc:	a8 0e       	add	r10, r24
 6fe:	b1 1c       	adc	r11, r1
 700:	d7 01       	movw	r26, r14
 702:	11 96       	adiw	r26, 0x01	; 1
 704:	6c 90       	ld	r6, X
 706:	77 24       	eor	r7, r7
 708:	73 94       	inc	r7
 70a:	0b c0       	rjmp	.+22     	; 0x722 <strtol+0x94>
 70c:	bb e2       	ldi	r27, 0x2B	; 43
 70e:	6b 12       	cpse	r6, r27
 710:	07 c0       	rjmp	.+14     	; 0x720 <strtol+0x92>
 712:	57 01       	movw	r10, r14
 714:	e2 e0       	ldi	r30, 0x02	; 2
 716:	ae 0e       	add	r10, r30
 718:	b1 1c       	adc	r11, r1
 71a:	d7 01       	movw	r26, r14
 71c:	11 96       	adiw	r26, 0x01	; 1
 71e:	6c 90       	ld	r6, X
 720:	71 2c       	mov	r7, r1
 722:	ce 01       	movw	r24, r28
 724:	8f 7e       	andi	r24, 0xEF	; 239
 726:	89 2b       	or	r24, r25
 728:	89 f4       	brne	.+34     	; 0x74c <strtol+0xbe>
 72a:	b0 e3       	ldi	r27, 0x30	; 48
 72c:	6b 12       	cpse	r6, r27
 72e:	22 c0       	rjmp	.+68     	; 0x774 <strtol+0xe6>
 730:	f5 01       	movw	r30, r10
 732:	80 81       	ld	r24, Z
 734:	8f 7d       	andi	r24, 0xDF	; 223
 736:	88 35       	cpi	r24, 0x58	; 88
 738:	41 f5       	brne	.+80     	; 0x78a <strtol+0xfc>
 73a:	61 80       	ldd	r6, Z+1	; 0x01
 73c:	f2 e0       	ldi	r31, 0x02	; 2
 73e:	af 0e       	add	r10, r31
 740:	b1 1c       	adc	r11, r1
 742:	87 2d       	mov	r24, r7
 744:	82 60       	ori	r24, 0x02	; 2
 746:	78 2e       	mov	r7, r24
 748:	c0 e1       	ldi	r28, 0x10	; 16
 74a:	d0 e0       	ldi	r29, 0x00	; 0
 74c:	c8 30       	cpi	r28, 0x08	; 8
 74e:	d1 05       	cpc	r29, r1
 750:	f1 f0       	breq	.+60     	; 0x78e <strtol+0x100>
 752:	4c f4       	brge	.+18     	; 0x766 <strtol+0xd8>
 754:	c2 30       	cpi	r28, 0x02	; 2
 756:	d1 05       	cpc	r29, r1
 758:	11 f5       	brne	.+68     	; 0x79e <strtol+0x110>
 75a:	c1 2c       	mov	r12, r1
 75c:	d1 2c       	mov	r13, r1
 75e:	e1 2c       	mov	r14, r1
 760:	b0 e4       	ldi	r27, 0x40	; 64
 762:	fb 2e       	mov	r15, r27
 764:	2e c0       	rjmp	.+92     	; 0x7c2 <strtol+0x134>
 766:	ca 30       	cpi	r28, 0x0A	; 10
 768:	d1 05       	cpc	r29, r1
 76a:	31 f0       	breq	.+12     	; 0x778 <strtol+0xea>
 76c:	c0 31       	cpi	r28, 0x10	; 16
 76e:	d1 05       	cpc	r29, r1
 770:	19 f1       	breq	.+70     	; 0x7b8 <strtol+0x12a>
 772:	15 c0       	rjmp	.+42     	; 0x79e <strtol+0x110>
 774:	20 97       	sbiw	r28, 0x00	; 0
 776:	51 f7       	brne	.-44     	; 0x74c <strtol+0xbe>
 778:	ca e0       	ldi	r28, 0x0A	; 10
 77a:	d0 e0       	ldi	r29, 0x00	; 0
 77c:	ac ec       	ldi	r26, 0xCC	; 204
 77e:	ca 2e       	mov	r12, r26
 780:	dc 2c       	mov	r13, r12
 782:	ec 2c       	mov	r14, r12
 784:	ac e0       	ldi	r26, 0x0C	; 12
 786:	fa 2e       	mov	r15, r26
 788:	1c c0       	rjmp	.+56     	; 0x7c2 <strtol+0x134>
 78a:	20 97       	sbiw	r28, 0x00	; 0
 78c:	f9 f6       	brne	.-66     	; 0x74c <strtol+0xbe>
 78e:	c8 e0       	ldi	r28, 0x08	; 8
 790:	d0 e0       	ldi	r29, 0x00	; 0
 792:	c1 2c       	mov	r12, r1
 794:	d1 2c       	mov	r13, r1
 796:	e1 2c       	mov	r14, r1
 798:	f0 e1       	ldi	r31, 0x10	; 16
 79a:	ff 2e       	mov	r15, r31
 79c:	12 c0       	rjmp	.+36     	; 0x7c2 <strtol+0x134>
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e8       	ldi	r25, 0x80	; 128
 7a6:	9e 01       	movw	r18, r28
 7a8:	44 27       	eor	r20, r20
 7aa:	37 fd       	sbrc	r19, 7
 7ac:	40 95       	com	r20
 7ae:	54 2f       	mov	r21, r20
 7b0:	11 d1       	rcall	.+546    	; 0x9d4 <__udivmodsi4>
 7b2:	69 01       	movw	r12, r18
 7b4:	7a 01       	movw	r14, r20
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <strtol+0x134>
 7b8:	c1 2c       	mov	r12, r1
 7ba:	d1 2c       	mov	r13, r1
 7bc:	e1 2c       	mov	r14, r1
 7be:	e8 e0       	ldi	r30, 0x08	; 8
 7c0:	fe 2e       	mov	r15, r30
 7c2:	f5 01       	movw	r30, r10
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	a9 01       	movw	r20, r18
 7cc:	4e 01       	movw	r8, r28
 7ce:	aa 24       	eor	r10, r10
 7d0:	97 fc       	sbrc	r9, 7
 7d2:	a0 94       	com	r10
 7d4:	ba 2c       	mov	r11, r10
 7d6:	1f 01       	movw	r2, r30
 7d8:	70 ed       	ldi	r23, 0xD0	; 208
 7da:	57 2e       	mov	r5, r23
 7dc:	56 0c       	add	r5, r6
 7de:	a9 e0       	ldi	r26, 0x09	; 9
 7e0:	a5 15       	cp	r26, r5
 7e2:	70 f4       	brcc	.+28     	; 0x800 <strtol+0x172>
 7e4:	8f eb       	ldi	r24, 0xBF	; 191
 7e6:	86 0d       	add	r24, r6
 7e8:	8a 31       	cpi	r24, 0x1A	; 26
 7ea:	18 f4       	brcc	.+6      	; 0x7f2 <strtol+0x164>
 7ec:	99 ec       	ldi	r25, 0xC9	; 201
 7ee:	59 2e       	mov	r5, r25
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <strtol+0x170>
 7f2:	8f e9       	ldi	r24, 0x9F	; 159
 7f4:	86 0d       	add	r24, r6
 7f6:	8a 31       	cpi	r24, 0x1A	; 26
 7f8:	28 f5       	brcc	.+74     	; 0x844 <strtol+0x1b6>
 7fa:	89 ea       	ldi	r24, 0xA9	; 169
 7fc:	58 2e       	mov	r5, r24
 7fe:	56 0c       	add	r5, r6
 800:	85 2d       	mov	r24, r5
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	8c 17       	cp	r24, r28
 806:	9d 07       	cpc	r25, r29
 808:	ec f4       	brge	.+58     	; 0x844 <strtol+0x1b6>
 80a:	67 fd       	sbrc	r22, 7
 80c:	17 c0       	rjmp	.+46     	; 0x83c <strtol+0x1ae>
 80e:	c2 16       	cp	r12, r18
 810:	d3 06       	cpc	r13, r19
 812:	e4 06       	cpc	r14, r20
 814:	f5 06       	cpc	r15, r21
 816:	78 f0       	brcs	.+30     	; 0x836 <strtol+0x1a8>
 818:	c5 01       	movw	r24, r10
 81a:	b4 01       	movw	r22, r8
 81c:	cc d0       	rcall	.+408    	; 0x9b6 <__mulsi3>
 81e:	9b 01       	movw	r18, r22
 820:	ac 01       	movw	r20, r24
 822:	25 0d       	add	r18, r5
 824:	31 1d       	adc	r19, r1
 826:	41 1d       	adc	r20, r1
 828:	51 1d       	adc	r21, r1
 82a:	21 30       	cpi	r18, 0x01	; 1
 82c:	31 05       	cpc	r19, r1
 82e:	41 05       	cpc	r20, r1
 830:	b0 e8       	ldi	r27, 0x80	; 128
 832:	5b 07       	cpc	r21, r27
 834:	10 f0       	brcs	.+4      	; 0x83a <strtol+0x1ac>
 836:	6f ef       	ldi	r22, 0xFF	; 255
 838:	01 c0       	rjmp	.+2      	; 0x83c <strtol+0x1ae>
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	31 96       	adiw	r30, 0x01	; 1
 83e:	d1 01       	movw	r26, r2
 840:	6c 90       	ld	r6, X
 842:	c9 cf       	rjmp	.-110    	; 0x7d6 <strtol+0x148>
 844:	87 2d       	mov	r24, r7
 846:	81 70       	andi	r24, 0x01	; 1
 848:	01 15       	cp	r16, r1
 84a:	11 05       	cpc	r17, r1
 84c:	71 f0       	breq	.+28     	; 0x86a <strtol+0x1dc>
 84e:	66 23       	and	r22, r22
 850:	29 f0       	breq	.+10     	; 0x85c <strtol+0x1ce>
 852:	31 97       	sbiw	r30, 0x01	; 1
 854:	d8 01       	movw	r26, r16
 856:	ed 93       	st	X+, r30
 858:	fc 93       	st	X, r31
 85a:	07 c0       	rjmp	.+14     	; 0x86a <strtol+0x1dc>
 85c:	71 fe       	sbrs	r7, 1
 85e:	19 c0       	rjmp	.+50     	; 0x892 <strtol+0x204>
 860:	32 97       	sbiw	r30, 0x02	; 2
 862:	d8 01       	movw	r26, r16
 864:	ed 93       	st	X+, r30
 866:	fc 93       	st	X, r31
 868:	14 c0       	rjmp	.+40     	; 0x892 <strtol+0x204>
 86a:	67 ff       	sbrs	r22, 7
 86c:	12 c0       	rjmp	.+36     	; 0x892 <strtol+0x204>
 86e:	88 23       	and	r24, r24
 870:	29 f0       	breq	.+10     	; 0x87c <strtol+0x1ee>
 872:	20 e0       	ldi	r18, 0x00	; 0
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	40 e0       	ldi	r20, 0x00	; 0
 878:	50 e8       	ldi	r21, 0x80	; 128
 87a:	04 c0       	rjmp	.+8      	; 0x884 <strtol+0x1f6>
 87c:	2f ef       	ldi	r18, 0xFF	; 255
 87e:	3f ef       	ldi	r19, 0xFF	; 255
 880:	4f ef       	ldi	r20, 0xFF	; 255
 882:	5f e7       	ldi	r21, 0x7F	; 127
 884:	82 e2       	ldi	r24, 0x22	; 34
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	90 93 61 00 	sts	0x0061, r25
 88c:	80 93 60 00 	sts	0x0060, r24
 890:	16 c0       	rjmp	.+44     	; 0x8be <strtol+0x230>
 892:	88 23       	and	r24, r24
 894:	41 f0       	breq	.+16     	; 0x8a6 <strtol+0x218>
 896:	50 95       	com	r21
 898:	40 95       	com	r20
 89a:	30 95       	com	r19
 89c:	21 95       	neg	r18
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	4f 4f       	sbci	r20, 0xFF	; 255
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	0c c0       	rjmp	.+24     	; 0x8be <strtol+0x230>
 8a6:	57 ff       	sbrs	r21, 7
 8a8:	0a c0       	rjmp	.+20     	; 0x8be <strtol+0x230>
 8aa:	82 e2       	ldi	r24, 0x22	; 34
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	90 93 61 00 	sts	0x0061, r25
 8b2:	80 93 60 00 	sts	0x0060, r24
 8b6:	2f ef       	ldi	r18, 0xFF	; 255
 8b8:	3f ef       	ldi	r19, 0xFF	; 255
 8ba:	4f ef       	ldi	r20, 0xFF	; 255
 8bc:	5f e7       	ldi	r21, 0x7F	; 127
 8be:	b9 01       	movw	r22, r18
 8c0:	ca 01       	movw	r24, r20
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <strtol+0x23e>
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	1f 91       	pop	r17
 8d2:	0f 91       	pop	r16
 8d4:	ff 90       	pop	r15
 8d6:	ef 90       	pop	r14
 8d8:	df 90       	pop	r13
 8da:	cf 90       	pop	r12
 8dc:	bf 90       	pop	r11
 8de:	af 90       	pop	r10
 8e0:	9f 90       	pop	r9
 8e2:	8f 90       	pop	r8
 8e4:	7f 90       	pop	r7
 8e6:	6f 90       	pop	r6
 8e8:	5f 90       	pop	r5
 8ea:	3f 90       	pop	r3
 8ec:	2f 90       	pop	r2
 8ee:	08 95       	ret

000008f0 <isspace>:
 8f0:	91 11       	cpse	r25, r1
 8f2:	4e c0       	rjmp	.+156    	; 0x990 <__ctype_isfalse>
 8f4:	80 32       	cpi	r24, 0x20	; 32
 8f6:	19 f0       	breq	.+6      	; 0x8fe <isspace+0xe>
 8f8:	89 50       	subi	r24, 0x09	; 9
 8fa:	85 50       	subi	r24, 0x05	; 5
 8fc:	d0 f7       	brcc	.-12     	; 0x8f2 <isspace+0x2>
 8fe:	08 95       	ret

00000900 <__ltoa_ncheck>:
 900:	bb 27       	eor	r27, r27
 902:	2a 30       	cpi	r18, 0x0A	; 10
 904:	51 f4       	brne	.+20     	; 0x91a <__ltoa_ncheck+0x1a>
 906:	99 23       	and	r25, r25
 908:	42 f4       	brpl	.+16     	; 0x91a <__ltoa_ncheck+0x1a>
 90a:	bd e2       	ldi	r27, 0x2D	; 45
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	01 c0       	rjmp	.+2      	; 0x91e <__ultoa_common>

0000091c <__ultoa_ncheck>:
 91c:	bb 27       	eor	r27, r27

0000091e <__ultoa_common>:
 91e:	fa 01       	movw	r30, r20
 920:	a6 2f       	mov	r26, r22
 922:	62 17       	cp	r22, r18
 924:	71 05       	cpc	r23, r1
 926:	81 05       	cpc	r24, r1
 928:	91 05       	cpc	r25, r1
 92a:	33 0b       	sbc	r19, r19
 92c:	30 fb       	bst	r19, 0
 92e:	66 f0       	brts	.+24     	; 0x948 <__ultoa_common+0x2a>
 930:	aa 27       	eor	r26, r26
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	88 1f       	adc	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	aa 1f       	adc	r26, r26
 93c:	a2 17       	cp	r26, r18
 93e:	10 f0       	brcs	.+4      	; 0x944 <__ultoa_common+0x26>
 940:	a2 1b       	sub	r26, r18
 942:	63 95       	inc	r22
 944:	38 50       	subi	r19, 0x08	; 8
 946:	a9 f7       	brne	.-22     	; 0x932 <__ultoa_common+0x14>
 948:	a0 5d       	subi	r26, 0xD0	; 208
 94a:	aa 33       	cpi	r26, 0x3A	; 58
 94c:	08 f0       	brcs	.+2      	; 0x950 <__ultoa_common+0x32>
 94e:	a9 5d       	subi	r26, 0xD9	; 217
 950:	a1 93       	st	Z+, r26
 952:	36 f7       	brtc	.-52     	; 0x920 <__ultoa_common+0x2>
 954:	b1 11       	cpse	r27, r1
 956:	b1 93       	st	Z+, r27
 958:	10 82       	st	Z, r1
 95a:	ca 01       	movw	r24, r20
 95c:	1c c0       	rjmp	.+56     	; 0x996 <strrev>

0000095e <__utoa_ncheck>:
 95e:	bb 27       	eor	r27, r27

00000960 <__utoa_common>:
 960:	fb 01       	movw	r30, r22
 962:	55 27       	eor	r21, r21
 964:	aa 27       	eor	r26, r26
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	aa 1f       	adc	r26, r26
 96c:	a4 17       	cp	r26, r20
 96e:	10 f0       	brcs	.+4      	; 0x974 <__utoa_common+0x14>
 970:	a4 1b       	sub	r26, r20
 972:	83 95       	inc	r24
 974:	50 51       	subi	r21, 0x10	; 16
 976:	b9 f7       	brne	.-18     	; 0x966 <__utoa_common+0x6>
 978:	a0 5d       	subi	r26, 0xD0	; 208
 97a:	aa 33       	cpi	r26, 0x3A	; 58
 97c:	08 f0       	brcs	.+2      	; 0x980 <__utoa_common+0x20>
 97e:	a9 5d       	subi	r26, 0xD9	; 217
 980:	a1 93       	st	Z+, r26
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	79 f7       	brne	.-34     	; 0x964 <__utoa_common+0x4>
 986:	b1 11       	cpse	r27, r1
 988:	b1 93       	st	Z+, r27
 98a:	11 92       	st	Z+, r1
 98c:	cb 01       	movw	r24, r22
 98e:	03 c0       	rjmp	.+6      	; 0x996 <strrev>

00000990 <__ctype_isfalse>:
 990:	99 27       	eor	r25, r25
 992:	88 27       	eor	r24, r24

00000994 <__ctype_istrue>:
 994:	08 95       	ret

00000996 <strrev>:
 996:	dc 01       	movw	r26, r24
 998:	fc 01       	movw	r30, r24
 99a:	67 2f       	mov	r22, r23
 99c:	71 91       	ld	r23, Z+
 99e:	77 23       	and	r23, r23
 9a0:	e1 f7       	brne	.-8      	; 0x99a <strrev+0x4>
 9a2:	32 97       	sbiw	r30, 0x02	; 2
 9a4:	04 c0       	rjmp	.+8      	; 0x9ae <strrev+0x18>
 9a6:	7c 91       	ld	r23, X
 9a8:	6d 93       	st	X+, r22
 9aa:	70 83       	st	Z, r23
 9ac:	62 91       	ld	r22, -Z
 9ae:	ae 17       	cp	r26, r30
 9b0:	bf 07       	cpc	r27, r31
 9b2:	c8 f3       	brcs	.-14     	; 0x9a6 <strrev+0x10>
 9b4:	08 95       	ret

000009b6 <__mulsi3>:
 9b6:	db 01       	movw	r26, r22
 9b8:	8f 93       	push	r24
 9ba:	9f 93       	push	r25
 9bc:	2d d0       	rcall	.+90     	; 0xa18 <__muluhisi3>
 9be:	bf 91       	pop	r27
 9c0:	af 91       	pop	r26
 9c2:	a2 9f       	mul	r26, r18
 9c4:	80 0d       	add	r24, r0
 9c6:	91 1d       	adc	r25, r1
 9c8:	a3 9f       	mul	r26, r19
 9ca:	90 0d       	add	r25, r0
 9cc:	b2 9f       	mul	r27, r18
 9ce:	90 0d       	add	r25, r0
 9d0:	11 24       	eor	r1, r1
 9d2:	08 95       	ret

000009d4 <__udivmodsi4>:
 9d4:	a1 e2       	ldi	r26, 0x21	; 33
 9d6:	1a 2e       	mov	r1, r26
 9d8:	aa 1b       	sub	r26, r26
 9da:	bb 1b       	sub	r27, r27
 9dc:	fd 01       	movw	r30, r26
 9de:	0d c0       	rjmp	.+26     	; 0x9fa <__udivmodsi4_ep>

000009e0 <__udivmodsi4_loop>:
 9e0:	aa 1f       	adc	r26, r26
 9e2:	bb 1f       	adc	r27, r27
 9e4:	ee 1f       	adc	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	a2 17       	cp	r26, r18
 9ea:	b3 07       	cpc	r27, r19
 9ec:	e4 07       	cpc	r30, r20
 9ee:	f5 07       	cpc	r31, r21
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <__udivmodsi4_ep>
 9f2:	a2 1b       	sub	r26, r18
 9f4:	b3 0b       	sbc	r27, r19
 9f6:	e4 0b       	sbc	r30, r20
 9f8:	f5 0b       	sbc	r31, r21

000009fa <__udivmodsi4_ep>:
 9fa:	66 1f       	adc	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	1a 94       	dec	r1
 a04:	69 f7       	brne	.-38     	; 0x9e0 <__udivmodsi4_loop>
 a06:	60 95       	com	r22
 a08:	70 95       	com	r23
 a0a:	80 95       	com	r24
 a0c:	90 95       	com	r25
 a0e:	9b 01       	movw	r18, r22
 a10:	ac 01       	movw	r20, r24
 a12:	bd 01       	movw	r22, r26
 a14:	cf 01       	movw	r24, r30
 a16:	08 95       	ret

00000a18 <__muluhisi3>:
 a18:	09 d0       	rcall	.+18     	; 0xa2c <__umulhisi3>
 a1a:	a5 9f       	mul	r26, r21
 a1c:	90 0d       	add	r25, r0
 a1e:	b4 9f       	mul	r27, r20
 a20:	90 0d       	add	r25, r0
 a22:	a4 9f       	mul	r26, r20
 a24:	80 0d       	add	r24, r0
 a26:	91 1d       	adc	r25, r1
 a28:	11 24       	eor	r1, r1
 a2a:	08 95       	ret

00000a2c <__umulhisi3>:
 a2c:	a2 9f       	mul	r26, r18
 a2e:	b0 01       	movw	r22, r0
 a30:	b3 9f       	mul	r27, r19
 a32:	c0 01       	movw	r24, r0
 a34:	a3 9f       	mul	r26, r19
 a36:	01 d0       	rcall	.+2      	; 0xa3a <__umulhisi3+0xe>
 a38:	b2 9f       	mul	r27, r18
 a3a:	70 0d       	add	r23, r0
 a3c:	81 1d       	adc	r24, r1
 a3e:	11 24       	eor	r1, r1
 a40:	91 1d       	adc	r25, r1
 a42:	08 95       	ret

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
